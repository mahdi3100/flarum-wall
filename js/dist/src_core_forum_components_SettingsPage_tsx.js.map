{"version":3,"file":"src_core_forum_components_SettingsPage_tsx.js","mappings":"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","sources":["webpack://@leo/flarum-wall/./src/core/common/components/Checkbox.tsx","webpack://@leo/flarum-wall/./src/core/common/components/FieldSet.tsx","webpack://@leo/flarum-wall/./src/core/common/components/Switch.tsx","webpack://@leo/flarum-wall/./src/core/common/utils/withAttr.ts","webpack://@leo/flarum-wall/./src/core/forum/components/ChangeEmailModal.tsx","webpack://@leo/flarum-wall/./src/core/forum/components/ChangePasswordModal.tsx","webpack://@leo/flarum-wall/./src/core/forum/components/NotificationGrid.js","webpack://@leo/flarum-wall/./src/core/forum/components/SettingsPage.tsx"],"sourcesContent":["import Component, { ComponentAttrs } from '../Component';\nimport LoadingIndicator from './LoadingIndicator';\nimport classList from '../utils/classList';\nimport withAttr from '../utils/withAttr';\nimport type Mithril from 'mithril';\nimport Icon from './Icon';\n\nexport interface ICheckboxAttrs extends ComponentAttrs {\n  state?: boolean;\n  loading?: boolean;\n  disabled?: boolean;\n  onchange: (checked: boolean, component: Checkbox<this>) => void;\n}\n\n/**\n * The `Checkbox` component defines a checkbox input.\n *\n * ### Attrs\n *\n * - `state` Whether or not the checkbox is checked.\n * - `className` The class name for the root element.\n * - `disabled` Whether or not the checkbox is disabled.\n * - `loading` Whether or not the checkbox is loading.\n * - `onchange` A callback to run when the checkbox is checked/unchecked.\n * - `children` A text label to display next to the checkbox.\n */\nexport default class Checkbox<CustomAttrs extends ICheckboxAttrs = ICheckboxAttrs> extends Component<CustomAttrs> {\n  view(vnode: Mithril.Vnode<CustomAttrs, this>) {\n    const className = classList([\n      'Checkbox',\n      this.attrs.state ? 'on' : 'off',\n      this.attrs.className,\n      this.attrs.loading && 'loading',\n      this.attrs.disabled && 'disabled',\n    ]);\n\n    return (\n      <label className={className}>\n        <input type=\"checkbox\" checked={this.attrs.state} disabled={this.attrs.disabled} onchange={withAttr('checked', this.onchange.bind(this))} />\n        <div className=\"Checkbox-display\" aria-hidden=\"true\">\n          {this.getDisplay()}\n        </div>\n        {vnode.children}\n      </label>\n    );\n  }\n\n  /**\n   * Get the template for the checkbox's display (tick/cross icon).\n   */\n  protected getDisplay(): Mithril.Children {\n    return this.attrs.loading ? (\n      <LoadingIndicator display=\"unset\" size=\"small\" />\n    ) : (\n      <Icon name={this.attrs.state ? 'fas fa-check' : 'fas fa-times'} />\n    );\n  }\n\n  /**\n   * Run a callback when the state of the checkbox is changed.\n   */\n  protected onchange(checked: boolean): void {\n    if (this.attrs.onchange) this.attrs.onchange(checked, this);\n  }\n}\n","import Component, { ComponentAttrs } from '../Component';\nimport classList from '../utils/classList';\nimport Mithril from 'mithril';\n\nexport interface IFieldSetAttrs extends ComponentAttrs {\n  label: string;\n  description?: string;\n}\n\n/**\n * The `FieldSet` component defines a collection of fields, displayed in a list\n * underneath a title.\n *\n * The children should be an array of items to show in the fieldset.\n */\nexport default class FieldSet<CustomAttrs extends IFieldSetAttrs = IFieldSetAttrs> extends Component<CustomAttrs> {\n  view(vnode: Mithril.Vnode<CustomAttrs, this>) {\n    return (\n      <div className={classList('FieldSet', this.attrs.className)} role=\"group\" aria-label={this.attrs.label} aria-disabled={false}>\n        <label className=\"FieldSet-label\" aria-hidden=\"true\">\n          {this.attrs.label}\n        </label>\n        {this.attrs.description ? <div className=\"FieldSet-description helpText\">{this.attrs.description}</div> : null}\n        <div className=\"FieldSet-items\">{vnode.children}</div>\n      </div>\n    );\n  }\n}\n","import classList from '../utils/classList';\nimport Checkbox, { ICheckboxAttrs } from './Checkbox';\n\n/**\n * The `Switch` component is a `Checkbox`, but with a switch display instead of\n * a tick/cross one.\n */\nexport default class Switch extends Checkbox {\n  static initAttrs(attrs: ICheckboxAttrs) {\n    super.initAttrs(attrs);\n\n    attrs.className = classList(attrs.className, 'Checkbox--switch');\n  }\n\n  getDisplay() {\n    return !!this.attrs.loading && super.getDisplay();\n  }\n}\n","/**\n * An event handler factory that makes it simpler to implement data binding\n * for component event listeners.\n *\n * The handler created by this factory passes the DOM element's attribute\n * identified by the first argument to the callback (usually a bidirectional\n * Mithril stream: https://mithril.js.org/stream.html#bidirectional-bindings).\n *\n * Replaces m.withAttr for Mithril 2.0.\n * @see https://mithril.js.org/archive/v0.2.5/mithril.withAttr.html\n */\nexport default function withAttr(key: string, cb: Function) {\n  return function (this: Element) {\n    cb(this.getAttribute(key) || (this as any)[key]);\n  };\n}\n","import app from '../../forum/app';\nimport FormModal, { IFormModalAttrs } from '../../common/components/FormModal';\nimport Button from '../../common/components/Button';\nimport Stream from '../../common/utils/Stream';\nimport type Mithril from 'mithril';\nimport RequestError from '../../common/utils/RequestError';\nimport ItemList from '../../common/utils/ItemList';\nimport Form from '../../common/components/Form';\n\n/**\n * The `ChangeEmailModal` component shows a modal dialog which allows the user\n * to change their email address.\n */\nexport default class ChangeEmailModal<CustomAttrs extends IFormModalAttrs = IFormModalAttrs> extends FormModal<CustomAttrs> {\n  /**\n   * The value of the email input.\n   */\n  email!: Stream<string>;\n\n  /**\n   * The value of the password input.\n   */\n  password!: Stream<string>;\n\n  /**\n   * Whether or not the email has been changed successfully.\n   */\n  success: boolean = false;\n\n  oninit(vnode: Mithril.Vnode<CustomAttrs, this>) {\n    super.oninit(vnode);\n\n    this.email = Stream(app.session.user!.email() || '');\n    this.password = Stream('');\n  }\n\n  className() {\n    return 'ChangeEmailModal Modal--small';\n  }\n\n  title() {\n    return app.translator.trans('core.forum.change_email.title');\n  }\n\n  content() {\n    return (\n      <div className=\"Modal-body\">\n        <Form className=\"Form--centered\">{this.fields().toArray()}</Form>\n      </div>\n    );\n  }\n\n  fields(): ItemList<Mithril.Children> {\n    const items = new ItemList<Mithril.Children>();\n\n    if (this.success) {\n      items.add(\n        'help',\n        <p className=\"helpText\">\n          {app.translator.trans('core.forum.change_email.confirmation_message', {\n            email: <strong>{this.email()}</strong>,\n          })}\n        </p>\n      );\n\n      items.add(\n        'dismiss',\n        <div className=\"Form-group\">\n          <Button className=\"Button Button--primary Button--block\" onclick={this.hide.bind(this)}>\n            {app.translator.trans('core.forum.change_email.dismiss_button')}\n          </Button>\n        </div>\n      );\n    } else {\n      items.add(\n        'email',\n        <div className=\"Form-group\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            className=\"FormControl\"\n            placeholder={app.session.user!.email()}\n            bidi={this.email}\n            disabled={this.loading}\n          />\n        </div>\n      );\n\n      items.add(\n        'password',\n        <div className=\"Form-group\">\n          <input\n            type=\"password\"\n            name=\"password\"\n            className=\"FormControl\"\n            autocomplete=\"current-password\"\n            placeholder={app.translator.trans('core.forum.change_email.confirm_password_placeholder')}\n            bidi={this.password}\n            disabled={this.loading}\n          />\n        </div>\n      );\n\n      items.add(\n        'submit',\n        <div className=\"Form-group Form-controls\">\n          <Button className=\"Button Button--primary Button--block\" type=\"submit\" loading={this.loading}>\n            {app.translator.trans('core.forum.change_email.submit_button')}\n          </Button>\n        </div>\n      );\n    }\n\n    return items;\n  }\n\n  onsubmit(e: SubmitEvent) {\n    e.preventDefault();\n\n    // If the user hasn't actually entered a different email address, we don't\n    // need to do anything. Woot!\n    if (this.email() === app.session.user!.email()) {\n      this.hide();\n      return;\n    }\n\n    this.loading = true;\n    this.alertAttrs = null;\n\n    app.session\n      .user!.save(this.requestAttributes(), {\n        errorHandler: this.onerror.bind(this),\n        meta: { password: this.password() },\n      })\n      .then(() => {\n        this.success = true;\n      })\n      .catch(() => {})\n      .then(this.loaded.bind(this));\n  }\n\n  requestAttributes() {\n    return { email: this.email() };\n  }\n\n  onerror(error: RequestError) {\n    if (error.status === 401 && error.alert) {\n      error.alert.content = app.translator.trans('core.forum.change_email.incorrect_password_message');\n    }\n\n    super.onerror(error);\n  }\n}\n","import app from '../../forum/app';\nimport FormModal, { IFormModalAttrs } from '../../common/components/FormModal';\nimport Button from '../../common/components/Button';\nimport Mithril from 'mithril';\nimport ItemList from '../../common/utils/ItemList';\nimport Form from '../../common/components/Form';\n\n/**\n * The `ChangePasswordModal` component shows a modal dialog which allows the\n * user to send themself a password reset email.\n */\nexport default class ChangePasswordModal<CustomAttrs extends IFormModalAttrs = IFormModalAttrs> extends FormModal<CustomAttrs> {\n  className() {\n    return 'ChangePasswordModal Modal--small';\n  }\n\n  title() {\n    return app.translator.trans('core.forum.change_password.title');\n  }\n\n  content() {\n    return (\n      <div className=\"Modal-body\">\n        <Form className=\"Form--centered\">{this.fields().toArray()}</Form>\n      </div>\n    );\n  }\n\n  fields() {\n    const fields = new ItemList<Mithril.Children>();\n\n    fields.add('help', <p className=\"helpText\">{app.translator.trans('core.forum.change_password.text')}</p>);\n\n    fields.add(\n      'submit',\n      <div className=\"Form-group Form-controls\">\n        <Button className=\"Button Button--primary Button--block\" type=\"submit\" loading={this.loading}>\n          {app.translator.trans('core.forum.change_password.send_button')}\n        </Button>\n      </div>\n    );\n\n    return fields;\n  }\n\n  onsubmit(e: SubmitEvent) {\n    e.preventDefault();\n\n    this.loading = true;\n\n    app\n      .request({\n        method: 'POST',\n        url: app.forum.attribute('apiUrl') + '/forgot',\n        body: this.requestBody(),\n      })\n      .then(this.hide.bind(this), this.loaded.bind(this));\n  }\n\n  requestBody() {\n    return { email: app.session.user!.email() };\n  }\n}\n","import app from '../../forum/app';\nimport Component from '../../common/Component';\nimport Checkbox from '../../common/components/Checkbox';\nimport ItemList from '../../common/utils/ItemList';\nimport Icon from '../../common/components/Icon';\n\n/**\n * The `NotificationGrid` component displays a table of notification types and\n * methods, allowing the user to toggle each combination.\n *\n * ### Attrs\n *\n * - `user`\n */\nexport default class NotificationGrid extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Information about the available notification methods.\n     *\n     * @type {({ name: string, icon: string, label: import('mithril').Children })[]}\n     */\n    this.methods = this.notificationMethods().toArray();\n\n    /**\n     * A map of which notification checkboxes are loading.\n     *\n     * @type {Record<string, boolean>}\n     */\n    this.loading = {};\n\n    /**\n     * Information about the available notification types.\n     *\n     * @type {({ name: string, icon: string, label: import('mithril').Children })[]}\n     */\n    this.types = this.notificationTypes().toArray();\n  }\n\n  view() {\n    const preferences = this.attrs.user.preferences();\n\n    return (\n      <table className=\"NotificationGrid\">\n        <thead>\n          <tr>\n            <td />\n            {this.methods.map((method) => (\n              <th className=\"NotificationGrid-groupToggle\" onclick={this.toggleMethod.bind(this, method.name)}>\n                <Icon name={method.icon} /> {method.label}\n              </th>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {this.types.map((type) => (\n            <tr>\n              <td className=\"NotificationGrid-groupToggle\" onclick={this.toggleType.bind(this, type.name)}>\n                <Icon name={type.icon} /> {type.label}\n              </td>\n              {this.methods.map((method) => {\n                const key = this.preferenceKey(type.name, method.name);\n\n                return (\n                  <td className=\"NotificationGrid-checkbox\">\n                    <Checkbox\n                      state={!!preferences[key]}\n                      loading={this.loading[key]}\n                      disabled={!(key in preferences)}\n                      onchange={this.toggle.bind(this, [key])}\n                    >\n                      <span className=\"sr-only\">\n                        {app.translator.trans('core.forum.settings.notification_checkbox_a11y_label_template', {\n                          description: type.label,\n                          method: method.label,\n                        })}\n                      </span>\n                    </Checkbox>\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.$('thead .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      const i = parseInt($(this).index(), 10) + 1;\n      $(this)\n        .parents('table')\n        .find('td:nth-child(' + i + ')')\n        .toggleClass('highlighted', e.type === 'mouseenter');\n    });\n\n    this.$('tbody .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      $(this)\n        .parent()\n        .find('td')\n        .toggleClass('highlighted', e.type === 'mouseenter');\n    });\n  }\n\n  /**\n   * Toggle the state of the given preferences, based on the value of the first\n   * one.\n   *\n   * @param {string[]} keys\n   */\n  toggle(keys) {\n    const user = this.attrs.user;\n    const preferences = user.preferences();\n    const enabled = !preferences[keys[0]];\n\n    keys.forEach((key) => {\n      this.loading[key] = true;\n      preferences[key] = enabled;\n    });\n\n    m.redraw();\n\n    user.save({ preferences }).then(() => {\n      keys.forEach((key) => (this.loading[key] = false));\n\n      m.redraw();\n    });\n  }\n\n  /**\n   * Toggle all notification types for the given method.\n   *\n   * @param {string} method\n   */\n  toggleMethod(method) {\n    const keys = this.types.map((type) => this.preferenceKey(type.name, method)).filter((key) => key in this.attrs.user.preferences());\n\n    this.toggle(keys);\n  }\n\n  /**\n   * Toggle all notification methods for the given type.\n   *\n   * @param {string} type\n   */\n  toggleType(type) {\n    const keys = this.methods.map((method) => this.preferenceKey(type, method.name)).filter((key) => key in this.attrs.user.preferences());\n\n    this.toggle(keys);\n  }\n\n  /**\n   * Get the name of the preference key for the given notification type-method\n   * combination.\n   *\n   * @param {string} type\n   * @param {string} method\n   * @return {string}\n   */\n  preferenceKey(type, method) {\n    return 'notify_' + type + '_' + method;\n  }\n\n  /**\n   * Build an item list for the notification methods to display in the grid.\n   *\n   * Each notification method is an object which has the following properties:\n   *\n   * - `name` The name of the notification method.\n   * - `icon` The icon to display in the column header.\n   * - `label` The label to display in the column header.\n   *\n   * @return {ItemList<{ name: string, icon: string, label: import('mithril').Children }>}\n   */\n  notificationMethods() {\n    const items = new ItemList();\n\n    items.add('alert', {\n      name: 'alert',\n      icon: 'fas fa-bell',\n      label: app.translator.trans('core.forum.settings.notify_by_web_heading'),\n    });\n\n    items.add('email', {\n      name: 'email',\n      icon: 'far fa-envelope',\n      label: app.translator.trans('core.forum.settings.notify_by_email_heading'),\n    });\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the notification types to display in the grid.\n   *\n   * Each notification type is an object which has the following properties:\n   *\n   * - `name` The name of the notification type.\n   * - `icon` The icon to display in the notification grid row.\n   * - `label` The label to display in the notification grid row.\n   *\n   * @return {ItemList<{ name: string, icon: string, label: import('mithril').Children}>}\n   */\n  notificationTypes() {\n    const items = new ItemList();\n\n    items.add('discussionRenamed', {\n      name: 'discussionRenamed',\n      icon: 'fas fa-pencil-alt',\n      label: app.translator.trans('core.forum.settings.notify_discussion_renamed_label'),\n    });\n\n    return items;\n  }\n}\n","import app from '../../forum/app';\nimport UserPage, { IUserPageAttrs } from './UserPage';\nimport ItemList from '../../common/utils/ItemList';\nimport Switch from '../../common/components/Switch';\nimport Button from '../../common/components/Button';\nimport FieldSet from '../../common/components/FieldSet';\nimport NotificationGrid from './NotificationGrid';\nimport ChangePasswordModal from './ChangePasswordModal';\nimport ChangeEmailModal from './ChangeEmailModal';\nimport listItems from '../../common/helpers/listItems';\nimport extractText from '../../common/utils/extractText';\nimport type Mithril from 'mithril';\nimport classList from '../../common/utils/classList';\nimport ThemeMode from '../../common/components/ThemeMode';\nimport { camelCaseToSnakeCase } from '../../common/utils/string';\nimport { ComponentAttrs } from '../../common/Component';\n\n/**\n * The `SettingsPage` component displays the user's settings control panel, in\n * the context of their user profile.\n */\nexport default class SettingsPage<CustomAttrs extends IUserPageAttrs = IUserPageAttrs> extends UserPage<CustomAttrs> {\n  discloseOnlineLoading?: boolean;\n  colorSchemeLoading?: boolean;\n\n  oninit(vnode: Mithril.Vnode<CustomAttrs, this>) {\n    super.oninit(vnode);\n\n    this.show(app.session.user!);\n\n    app.setTitle(extractText(app.translator.trans('core.forum.settings.title')));\n  }\n\n  content() {\n    return (\n      <div className=\"SettingsPage\">\n        <ul>{listItems(this.settingsItems().toArray())}</ul>\n      </div>\n    );\n  }\n\n  sectionProps(): Record<string, ComponentAttrs> {\n    return {\n      account: { className: 'FieldSet--col' },\n      colorScheme: {\n        className: 'FieldSet--col',\n        visible: () => app.allowUserColorScheme,\n      },\n    };\n  }\n\n  /**\n   * Build an item list for the user's settings controls.\n   */\n  settingsItems() {\n    const items = new ItemList<Mithril.Children>();\n\n    ['account', 'notifications', 'privacy', 'colorScheme'].forEach((section, index) => {\n      const sectionItems = `${section}Items` as 'accountItems' | 'notificationsItems' | 'privacyItems';\n\n      const { className, visible, ...props } = this.sectionProps()[section] || {};\n\n      if (visible && visible() === false) return;\n\n      items.add(\n        section,\n        <FieldSet\n          className={classList(`Settings-${section} FieldSet--min`, className || '')}\n          label={app.translator.trans(`core.forum.settings.${camelCaseToSnakeCase(section)}_heading`)}\n          {...props}\n        >\n          {this[sectionItems]().toArray()}\n        </FieldSet>,\n        100 - index * 10\n      );\n    });\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's account settings.\n   */\n  accountItems() {\n    const items = new ItemList<Mithril.Children>();\n\n    items.add(\n      'changePassword',\n      <Button className=\"Button\" onclick={() => app.modal.show(ChangePasswordModal)}>\n        {app.translator.trans('core.forum.settings.change_password_button')}\n      </Button>,\n      100\n    );\n\n    items.add(\n      'changeEmail',\n      <Button className=\"Button\" onclick={() => app.modal.show(ChangeEmailModal)}>\n        {app.translator.trans('core.forum.settings.change_email_button')}\n      </Button>,\n      90\n    );\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's notification settings.\n   */\n  notificationsItems() {\n    const items = new ItemList<Mithril.Children>();\n\n    items.add('notificationGrid', <NotificationGrid user={this.user} />, 100);\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's privacy settings.\n   */\n  privacyItems() {\n    const items = new ItemList<Mithril.Children>();\n\n    items.add(\n      'discloseOnline',\n      <Switch\n        state={this.user!.preferences()?.discloseOnline}\n        onchange={(value: boolean) => {\n          this.discloseOnlineLoading = true;\n\n          this.user!.savePreferences({ discloseOnline: value }).then(() => {\n            this.discloseOnlineLoading = false;\n            m.redraw();\n          });\n        }}\n        loading={this.discloseOnlineLoading}\n      >\n        {app.translator.trans('core.forum.settings.privacy_disclose_online_label')}\n      </Switch>,\n      100\n    );\n\n    return items;\n  }\n\n  /**\n   * Color schemes.\n   */\n  colorSchemeItems() {\n    const items = new ItemList<Mithril.Children>();\n\n    ThemeMode.colorSchemes.forEach((mode) => {\n      items.add(\n        mode.id,\n        <ThemeMode\n          mode={mode.id}\n          label={mode.label || app.translator.trans('core.forum.settings.color_schemes.' + mode.id.replace('-', '_') + '_mode_label')}\n          selected={this.user!.preferences()?.colorScheme === mode.id}\n          loading={this.colorSchemeLoading}\n          onclick={() => {\n            this.colorSchemeLoading = true;\n\n            this.user!.savePreferences({ colorScheme: mode.id }).then(() => {\n              this.colorSchemeLoading = false;\n              app.setColorScheme(mode.id);\n              m.redraw();\n            });\n          }}\n        />,\n        100\n      );\n    });\n\n    return items;\n  }\n}\n"],"names":["Component","LoadingIndicator","classList","withAttr","Icon","Checkbox","_Component","apply","arguments","_inheritsLoose","_proto","prototype","view","vnode","className","attrs","state","loading","disabled","m","type","checked","onchange","bind","getDisplay","children","display","size","name","default","FieldSet","role","label","description","Switch","_Checkbox","initAttrs","call","key","cb","getAttribute","app","FormModal","Button","Stream","ItemList","Form","ChangeEmailModal","_FormModal","_this","_len","length","args","Array","_key","concat","email","password","success","oninit","session","user","title","translator","trans","content","fields","toArray","items","add","onclick","hide","placeholder","bidi","autocomplete","onsubmit","e","_this2","preventDefault","alertAttrs","save","requestAttributes","errorHandler","onerror","meta","then","loaded","error","status","alert","ChangePasswordModal","request","method","url","forum","attribute","body","requestBody","NotificationGrid","methods","notificationMethods","types","notificationTypes","preferences","map","toggleMethod","icon","toggleType","preferenceKey","toggle","oncreate","$","i","parseInt","index","parents","find","toggleClass","parent","keys","enabled","forEach","redraw","_this3","filter","_this4","UserPage","listItems","extractText","ThemeMode","camelCaseToSnakeCase","SettingsPage","_UserPage","discloseOnlineLoading","colorSchemeLoading","show","setTitle","settingsItems","sectionProps","account","colorScheme","visible","allowUserColorScheme","section","sectionItems","_ref","props","_objectWithoutPropertiesLoose","_excluded","Object","assign","accountItems","modal","notificationsItems","privacyItems","_preferences","discloseOnline","value","savePreferences","colorSchemeItems","colorSchemes","mode","_preferences2","id","replace","selected","setColorScheme"],"sourceRoot":""}