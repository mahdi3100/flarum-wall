{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@leomahdi/flarum-wall/webpack/bootstrap","webpack://@leomahdi/flarum-wall/webpack/runtime/compat get default export","webpack://@leomahdi/flarum-wall/webpack/runtime/define property getters","webpack://@leomahdi/flarum-wall/webpack/runtime/hasOwnProperty shorthand","webpack://@leomahdi/flarum-wall/external root \"flarum.core.compat['common/app']\"","webpack://@leomahdi/flarum-wall/./src/common/index.ts","webpack://@leomahdi/flarum-wall/external root \"flarum.core.compat['forum/app']\"","webpack://@leomahdi/flarum-wall/external root \"flarum.core.compat['forum/components/UserPage']\"","webpack://@leomahdi/flarum-wall/external root \"flarum.core.compat['common/extend']\"","webpack://@leomahdi/flarum-wall/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@leomahdi/flarum-wall/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@leomahdi/flarum-wall/external root \"flarum.core.compat['common/components/Button']\"","webpack://@leomahdi/flarum-wall/external root \"flarum.core.compat['forum/components/DiscussionComposer']\"","webpack://@leomahdi/flarum-wall/external root \"flarum.core.compat['common/utils/Stream']\"","webpack://@leomahdi/flarum-wall/./src/forum/CustomDiscussionComposer.js","webpack://@leomahdi/flarum-wall/./src/forum/MyDecomposerButton.ts","webpack://@leomahdi/flarum-wall/external root \"flarum.core.compat['forum/components/PostStream']\"","webpack://@leomahdi/flarum-wall/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@leomahdi/flarum-wall/./src/forum/PostsUserWall.ts","webpack://@leomahdi/flarum-wall/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@leomahdi/flarum-wall/external root \"flarum.core.compat['forum/states/PostStreamState']\"","webpack://@leomahdi/flarum-wall/./src/forum/UserWall.tsx","webpack://@leomahdi/flarum-wall/./src/forum/index.tsx","webpack://@leomahdi/flarum-wall/./src/forum/NavitemWall.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/app'];","import app from 'flarum/common/app';\n\napp.initializers.add('leomahdi/flarum-wall', () => {\n  console.log('[leomahdi/flarum-wall] Hello, forum and admin!');\n});\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/UserPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inheritsLoose(t, o) {\n  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);\n}\nexport { _inheritsLoose as default };","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/Stream'];","import app from 'flarum/forum/app';\nimport DiscussionComposer from 'flarum/forum/components/DiscussionComposer';\nimport Stream from 'flarum/common/utils/Stream';\n\nexport default class CustomDiscussionComposer extends DiscussionComposer {\n\n  static initAttrs(attrs) {\n    super.initAttrs(attrs);\n\n    attrs.titlePlaceholder = \"Create a thread ! \"\n    attrs.submitLabel = \"Create a thread  ! \"\n\n  }\n\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    // Initialize streams for title and content\n    this.fields = {\n      title: Stream(''),\n      content: Stream(''),\n      tags: Stream([]),\n      discussions_wall: Stream(1)\n    };\n  }\n  data() {\n    let data = super.data();\n\n    //inject discussions_wall in discussions Obj\n    data.discussions_wall = this.fields.discussions_wall();\n    return data;\n  }\n\n\n  onsubmit() {\n    this.loading = true;\n\n    const title = this.composer.fields.title();\n    const content = this.composer.fields.content();\n\n    // Basic validation (you can expand this)\n    if (!title || !content) {\n      alert('Please fill in both the title and content.');\n      return;\n    }\n\n    const data = this.data();\n\n    console.log(data)\n    // Create and save the discussion\n    app.store\n      .createRecord('discussions')\n      .save(data)\n      .then((discussion) => {\n        // After success, redirect to the new discussion\n        //this is the daufalt m.route.set(app.route.discussion(discussion));\n        //I i tried this but it did not work m.route.set(app.route.userWall());\n        //I tried this but it did not re-render m.route.set(`/u/${m.route.param('username')}/wall`,null); \n        //So i used EventEmitter :\n        if (app.redrawHandler) {\n          app.redrawHandler(discussion.id());  // Trigger redraw via the global handler\n        }\n\n        // Hide the composer\n        app.composer.hide();\n\n        console.log('Discussion created successfully:', discussion);\n      })\n      .catch((error) => {\n        app.composer.hide();\n        console.error('Error creating discussion:', error);\n        alert('There was an error creating the discussion.');\n      });\n  }\n\n\n}\n","import app from 'flarum/forum/app';\nimport Button from 'flarum/common/components/Button';\n\nimport CustomDiscussionComposer from './CustomDiscussionComposer';\n\n\n/**\n * Button Component that shown in Wall Content => to invoke CustomDiscussionComposer \n */\nexport default class CustomDiscussionButton {\n  /*view() {\n    return (\n      m('button.Post.ReplyPlaceholder', { onclick: this.action.bind(this) }, [\n      m('div.Post-container', [\n          /*m('div.Post-side', [\n              m(Avatar, { user: app.session.user, className: 'Post-avatar' })\n          ]),*//*\n  m('div.Post-main', [\n    m('span.Post-header', \"Create a thread ! \")\n])\n])\n]))\n}*/\n\n  component() {\n\n    return Button.component(\n      {\n        icon: 'fas fa-pen',\n        className: 'Button Button--primary IndexPage-newDiscussion',\n        onclick: this.action.bind(this),\n        //disabled: !this.canStartDiscussion,\n      },\n      \"Create a thread !\");\n  }\n  action(e: any) {\n    e.preventDefault();\n\n    return new Promise((resolve, reject) => {\n      if (app.session.user) {\n\n        app.composer.load(CustomDiscussionComposer, {\n          user: app.session.user,\n          titlePlaceholder: app.translator.trans('core.forum.composer_discussion.title_placeholder'),\n          submitLabel: app.translator.trans('core.forum.composer_discussion.submit_button'),\n        });\n\n        app.composer.show();\n\n        return resolve(e);\n      } else {\n        //To add later=> app.modal.show(LogInModal);\n\n        return reject();\n      }\n    });\n  }\n\n\n\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/PostStream'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","import app from 'flarum/forum/app';\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\nimport PostStream from 'flarum/forum/components/PostStream';\nimport Post from 'flarum/common/models/Post';\nimport PostStreamState from 'flarum/forum/states/PostStreamState';\nimport Discussion from 'flarum/common/models/Discussion';\n\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\n\n\n/**\n * The extending DiscussionPage is for its method \"positionChanged\"\n * Not yet tested !\n */\nexport default class PostsUserWall extends DiscussionPage {\n  selectedDiscussion: Discussion;\n  stream: PostStreamState;\n\n\n  constructor(selectedDiscussion: Discussion, stream: PostStreamState) {\n\n    super();\n    this.selectedDiscussion = selectedDiscussion; \n    this.stream = stream;    \n\n  }\n  \n  view() {\n\n   \n      return m('div', { className: 'DiscussionPage-stream' },\n        m(PostStream, {\n          discussion: this.selectedDiscussion,\n          stream: this.stream,\n          onPositionChange: this.positionChanged.bind(this) \n        })\n\n      );\n    \n  }\n \n\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/PostStreamState'];","import app from 'flarum/forum/app';\nimport UserPage, { IUserPageAttrs } from 'flarum/forum/components/UserPage';\n\nimport MyDecomposerButton from './MyDecomposerButton';\n\nimport DiscussionListState from 'flarum/forum/states/DiscussionListState';\n\nimport User from 'flarum/common/models/User';\nimport PostsUserWall from \"./PostsUserWall\"\n\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\n\nimport Post from 'flarum/common/models/Post';\nimport PostStreamState from 'flarum/forum/states/PostStreamState';\nimport Discussion from 'flarum/common/models/Discussion';\n\n\nimport { ApiResponseSingle } from 'flarum/common/Store';\nimport Model from 'flarum/common/Model';\nexport default class WallUserPage extends UserPage<IUserPageAttrs, DiscussionListState> {\n  composeButton: MyDecomposerButton | undefined;\n  postsUserWall: PostsUserWall | undefined;\n\n  loading: boolean = false;\n  selectedDiscussion: Discussion | undefined;\n  stream: PostStreamState | undefined;\n\n\n  constructor() {\n    super();\n\n\n    this.getIdThread();\n\n  }\n  oninit(vnode) {// Mithril.Vnode<IUserPageAttrs, this>=> import Mithril from 'mithril';\n    super.oninit(vnode);\n\n\n    this.loadUser(m.route.param('username'));\n\n    // Create an instance of CustomDiscussionButton\n    this.composeButton = new MyDecomposerButton();\n\n    //For redrawing this component when new discussion is being submitted. fired by CustomDiscussionComposer\n    app.redrawHandler = (newIdDiscission) => {\n      this.loadDiscussion(newIdDiscission)\n    };\n\n    this.loading = true;\n\n  }\n  requestParams(): Record<string, unknown> {\n    return {\n      bySlug: true,\n      //page: { near: 3 },\n    };\n  }\n\n  //Retrieve the ID Thread conversation !  \n  getIdThread() {\n    const getUsername = m.route.param(\"username\");\n    this.loading = true;\n\n    app.request({\n\n      method: 'GET',\n      //url:\"http://localhost:8888/api/wall-discussion-id\"\n      url: app.forum.attribute('apiUrl') + '/wall-discussion-id?username=' + getUsername\n    })\n      .then(response => {\n        console.log('Discussions: ID', response);\n        this.loading = false;\n\n        if (!response?.data?.id) {m.redraw(); return; } //dsiplay this.composeButton.component()\n\n\n        this.loadDiscussion(response.data.id);\n\n\n      })\n      .catch(error => {\n\n        console.error('Error fetching discussions:', error);\n        this.loading = false;\n      });\n  }\n\n  //Retreive Discussion with app.store.find(\"discussion\",ID)\n  loadDiscussion(discussions_wall: string) {\n\n    let includedPosts: Post[] = [];\n    this.loading = true;\n    const params = this.requestParams();\n    ///const getUsername =  m.route.param(\"username\") ;\n\n    app.store.find('discussions', discussions_wall, params\n\n      //{ filter: { \"discussions_wall\":getUsername },}\n      //cause me headache on retrieving discussions  as Array or model Api therefore i used getIdThread() first\n    ).then((discussion: ApiResponseSingle<Model>) => {\n\n      this.loading = false;\n\n      if (discussion.payload && discussion.payload.included) {\n\n        const discussionId = discussion.id();\n\n        //retrieving Posts of this sepecific Discussion\n        includedPosts = discussion.payload.included\n          .filter(\n            (record) =>\n              record.type === 'posts' &&\n              record.relationships &&\n              record.relationships.discussion &&\n              !Array.isArray(record.relationships.discussion.data)\n              && record.relationships.discussion.data.id === discussionId\n          )\n          .map((record) => app.store.getById<Post>('posts', record.id) as Post)\n          .sort((a: Post, b: Post) => a.number() - b.number())\n          .slice(0, 20);\n      }\n\n      this.selectedDiscussion = discussion as Discussion;\n      this.stream = new PostStreamState(discussion, includedPosts);//null //discussions.postStream();\n\n\n      this.postsUserWall = new PostsUserWall(this.selectedDiscussion, this.stream);\n\n      m.redraw();\n    }).catch(error => {\n      console.error('Error loading discussions:', error);\n      this.loading = false;\n      m.redraw();\n    });\n  }\n\n\n  show(user: User): void {\n    super.show(user);\n\n    /*\n    this.state = new DiscussionListState({\n      filter: { author: user.username() },\n      sort: 'newest',\n    });\n\n    this.state.refresh();\n    */\n  }\n\n  content() {\n    if (this.loading) {\n      return m(LoadingIndicator);\n    } else {\n      return m('div', { className: 'WallUserPage-container' },\n\n        m('div', { className: 'DiscussionList-container' },\n          (this.selectedDiscussion\n            &&\n            this.stream)\n            ? this.postsUserWall && this.postsUserWall.view()\n\n            : this.composeButton && this.composeButton.component()\n\n        )\n      );\n    }\n  }\n\n\n}\n","import app from 'flarum/forum/app';\nimport { initializeItemWall } from './NavitemWall';\n\n\napp.initializers.add('leomahdi/flarum-wall', () => {\n  console.log('[leomahdi/flarum-wall] Hello, forum!');\n\n\n// Call the function to register the routes and extend the UserPage\ninitializeItemWall(); \n\n\n \n});\n","\nimport app from 'flarum/forum/app';\nimport UserPage from 'flarum/forum/components/UserPage';\nimport { extend } from 'flarum/common/extend';\n\n\n\nimport UserWall from './UserWall';\n\nexport function initializeItemWall() {\n  console.log('[leomahdi/flarum-wall] Initializing extension...');\n\n  //Register the frontend route without creating a new instance of Routes\n  app.routes.userWall = {\n    path: '/u/:username/wall',\n    component: UserWall,\n  };\n\n  // Extend UserPage to add the new \"Wall\" navigation item\n  extend(UserPage.prototype, 'navItems', function (items) {\n\n    items.add('wall',\n      m('a', {\n        class: 'UserPage-navItem',\n        active: \"true\",\n\n\n        onclick: () => {\n\n          m.route.set(`/u/${m.route.param('username')}/wall`);\n\n        }\n      },\n        m('i', { class: 'icon Wall-icon fas fa-user  Button-icon' })\n        , m('span', { class: 'Button-label' }, \"Wall\")\n      ),\n      110\n    );\n\n    //Inject Css class for Active Link Item\n    const username = m.route.param('username');\n    const currenturl = `/u/${username}/wall`;\n    if (m.route.get().toString().trim() == currenturl.trim()) {\n      document.querySelector(\".item-wall\")?.classList.add(\"active\")\n    } else\n      document.querySelector(\".item-wall\")?.classList.remove(\"active\");\n\n  });\n\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","flarum","core","compat","app","add","console","log","_setPrototypeOf","t","e","setPrototypeOf","bind","__proto__","_inheritsLoose","create","constructor","CustomDiscussionComposer","_DiscussionComposer","apply","arguments","initAttrs","attrs","titlePlaceholder","submitLabel","_proto","oninit","vnode","this","fields","title","Stream","content","tags","discussions_wall","data","onsubmit","loading","composer","createRecord","save","then","discussion","id","hide","error","alert","DiscussionComposer","CustomDiscussionButton","component","Button","icon","className","onclick","action","preventDefault","Promise","resolve","reject","user","load","trans","show","PostsUserWall","_DiscussionPage","selectedDiscussion","stream","_this","view","m","PostStream","onPositionChange","positionChanged","DiscussionPage","WallUserPage","_UserPage","composeButton","postsUserWall","getIdThread","_this2","loadUser","route","param","MyDecomposerButton","newIdDiscission","loadDiscussion","requestParams","bySlug","_this3","getUsername","method","url","attribute","response","_response$data","redraw","_this4","includedPosts","params","find","payload","included","discussionId","filter","record","type","relationships","Array","isArray","map","getById","sort","b","number","slice","PostStreamState","LoadingIndicator","UserPage","userWall","path","UserWall","extend","items","_document$querySelect2","class","active","set","_document$querySelect","currenturl","toString","trim","document","querySelector","classList","remove"],"sourceRoot":""}